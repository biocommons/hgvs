[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools >= 69.0.2",
  "setuptools_scm[toml] >= 8.0"
]

[project]
authors = [
  {name = "HGVS Contributors", email = "biocommons-dev@googlegroups.com"}
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Healthcare Industry",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Scientific/Engineering :: Medical Science Apps."
]
dependencies = [
  "attrs >= 17.4.0", # https://github.com/biocommons/hgvs/issues/473
  "biocommons.seqrepo >= 0.6.10",
  "bioutils >= 0.4.0,<1.0",
  "configparser >= 3.3.0",
  "importlib_resources",
  "ipython",
  "parsley",
  "psycopg2"
]
description = "HGVS Parser, Formatter, Mapper, Validator"
dynamic = ["version"]
keywords = [
  "biocommons",
  "bioinformatics",
  "computational biology",
  "genome variation",
  "genomics",
  "hgvs",
  "variation"
]
license = {file = "LICENSE.txt"}
name = "hgvs"
readme = "README.md"
requires-python = ">=3.10"

[project.optional-dependencies]
dev = [
  "pre-commit >= 4.2.0",
  "ruff == 0.12.8",
  "ipython",
  "jupyter",
  "pyright",
  "pytest",
  "pytest-cov",
  "pytest-recording",
  "restview",
  "setuptools",
  "sphinx",
  "sphinx_rtd_theme",
  "sphinxcontrib-fulltoc >= 1.1",
  "toml-sort",
  "tox",
  "vcrpy",
]

[project.scripts]
"hgvs-shell" = "hgvs.shell:shell"

[project.urls]
"Bug Tracker" = "https://github.com/biocommons/hgvs/issues"
"Homepage" = "https://github.com/biocommons/hgvs"

[tool.black]
line-length = 100

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:"
]
show_missing = true

[tool.coverage.run]
branch = true
omit = [
  "*_test.py",
  "*/test/*",
  "hgvs/__init__.py",
  "hgvs/dataproviders/interface.py",
  "hgvs/dataproviders/ncbi.py",
  "hgvs/dataproviders/uta.py",
  "hgvs/decorators/*",
  "hgvs/intervalmapper.py",
  "hgvs/shell.py",
  "hgvs/transcriptmapper.py",
  "hgvs/utils/PersistentDict.py",
  "hgvs/utils/context.py",
  "hgvs/utils/orderedenum.py"
]
source = ["hgvs"]

# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
[tool.pytest.ini_options]
addopts = "-s -v --strict-markers -m 'not extra' --cov=src"  # --doctest-modules
# addopts = [
#   "-rsvx",
#   "-m 'not extra'",
#   "--cov=src",
#   "--ignore=hgvs/dataproviders/ncbi.py"
# ]
doctest_optionflags = [
  "ALLOW_BYTES",
  "ALLOW_UNICODE",
  "ELLIPSIS",
  "IGNORE_EXCEPTION_DETAIL",
  "NORMALIZE_WHITESPACE"
]
markers = [
  "extra",
  "issues",
  "mapping",
  "models",
  "network: tests that require network connectivity",
  "normalization",
  "quick",
  "regression",
  "slow: slow tests that should be run infrequently",
  "validation",
]
norecursedirs = [
  ".eggs",
  "archive",
  "build",
  "cover",
  "dist",
  "etc",
  "examples",
  "hgvs.egg-info",
  "misc",
  "prof",
  "sbin",
  "tmp",
  "venv"
]

[tool.setuptools]
include-package-data = true
package-dir = {"" = "src"}
zip-safe = true

[tool.setuptools.package-data]
hgvs = ["_data/*"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]

[tool.sphinx-build]
all-files = true

[tool.wheel]
universal = 1

[tool.ruff]
src = ["src", "tests"]
line-length = 100
exclude = [
    "bin",
    "docs",
    "examples",
    "misc",
    "sbin",
]

[tool.ruff.lint]
select = [
    "ANN",  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S",  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "COM",  # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "C4",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "ISC",  # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ICN",  # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "LOG",  # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",  # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "INP",  # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20",  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "Q",  # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF",  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SLOT",  # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "TID",  # https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "I",  # https://docs.astral.sh/ruff/rules/#isort-i
    "N",  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PERF",  # https://docs.astral.sh/ruff/rules/#perflint-perf
    "E", "W",  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "D",  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PLC",  # https://docs.astral.sh/ruff/rules/#convention-c
    "PLE",  # https://docs.astral.sh/ruff/rules/#error-e_1
    "PLR",  # https://docs.astral.sh/ruff/rules/#refactor-plr
    "PLW",  # https://docs.astral.sh/ruff/rules/#warning-plw
    "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "FURB",  # https://docs.astral.sh/ruff/rules/#refurb-furb
    "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "TRY",  # https://docs.astral.sh/ruff/rules/#tryceratops-try
]
ignore = [
    # ignore for compatibility with formatter
    "D206",
    "D300",
    "W191",
    "E111",
    "E114",
    "E117",
    "E501",
    "W191",
    "S321",
    "COM812",
    # don't require types on *args, **kwargs
    "ANN002",
    "ANN003",
    # subjective pylint thresholds
    "PLR0904",
    "PLR091",
    "PLR1702",
    "PLR2004",
    # excessive docstring requirements
    "D105",
    "D205",
    "D203",
    "D213",  # conflicts with D212
    "D400",
    "D401",
    "D403",
    "D415",
    # excessive exception message requirements
    "TRY003",
    # excessive type ignore requirements
    "PGH003",
    # misc unnecessary readability requirements
    "RET504",
    # should be addressed in a separate issue
    "D",
    "ANN",
    "PT",
    "N806",
]

[tool.ruff.lint.per-file-ignores]
# ANN001 - missing-type-function-argument
# ANN2 - missing-return-type
# D100 - undocumented-public-module
# D101
# D102 - undocumented-public-class
# D103 - undocumented-public-function
# S101 - assert
# S108 -
# B011 - assert-false
# INP001 - implicit-namespace-package
# N802 -
# SLF001 -
"tests/*" = [
    "ANN001",
    "ANN2",
    "D10",
    "S101",
    "S108",
    "B011",
    "INP001",
    "N801",
    "N802",
    "SLF001",
]
"tests/test_pretty_print.py" = [
    "T201",
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.format]
docstring-code-format = true
