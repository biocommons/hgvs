#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

import csv
import logging
import re
import sys
import traceback

from bioutils.sequences import reverse_complement, complement

from hgvs.dataproviders.uta import connect
from hgvs.parser import Parser
from hgvs.variantmapper import EasyVariantMapper
from hgvs.normalizer import Normalizer
import hgvs.utils.context as huc


logging.basicConfig(level=logging.WARN)
logger = logging.getLogger(__name__)

with_context = True
cigarop_re = re.compile('(?P<l>\d+)(?P<op>[=IDX])')

def generate_variants(row):
    """given a query row, return genomic variants corresponding to mismatches

    Each input row represents the alignment of corresponding
    transcript and genomic exons, with transcript as reference.

    """
    # to and go are offsets/indecies in the transcript and genomic reference
    # accounting for indels in each sequence.
    to = 0
    go = 0

    tx_seq = row['tx_aseq'].replace('-','')
    alt_seq = row['alt_aseq'].replace('-','')
    cigarops = list(m.groupdict() for m in cigarop_re.finditer(row['cigar']))

    # loop over cigar ops, incrementing transcript offset (to) and
    # genomic offset (go). Also, yield a variant for each
    # non-identity.
    ac = row['tx_ac']
    for m in cigarops:
        l = int(m['l'])
        ac = gq = tq = None
        tq = tx_seq[to:to+l]
        gq = alt_seq[go:go+l]
        if m['op'] != '=':
            if m['op'] == 'X':
                vs = go + 1
                ve = vs + l - 1
                if l==1:
                    edit = "{gq}>{tq}"
                else:
                    edit = "del{gq}ins{tq}"
            elif m['op'] == 'D':
                vs = go
                ve = vs + 1
                edit = "ins{tq}"
            elif m['op'] == 'I':
                vs = go + 1
                ve = vs + l - 1
                edit = "del{tq}"

            pos = "{gvs}" if vs == ve else "{gvs}_{gve}"
            v = "{ac}:g." + pos + edit
            if row['alt_strand'] == 1:
                gvs, gve = row['alt_start_i'] + vs, row['alt_start_i'] + ve
            else:
                gvs, gve = row['alt_end_i'] - ve, row['alt_end_i'] - vs
                tq = reverse_complement(tq)
                gq = reverse_complement(gq)
            yield v.format(ac=row['alt_ac'], gvs=gvs, gve=gve, tq=tq, gq=gq)

        if m['op'] in '=XD':
            to += l
        if m['op'] in '=XI':
            go += l


if __name__ == "__main__":
    hdp = connect()
    hp = Parser()
    evm = EasyVariantMapper(hdp, normalize=False)
    hn3 = Normalizer(hdp, shuffle_direction=3)
    hn5 = Normalizer(hdp, shuffle_direction=5)

    fieldnames = 'hgvs_g5 hgvs_c3 tx_ac strand exon cigar'.split()
    out = csv.DictWriter(sys.stdout, fieldnames=fieldnames, delimiter=b'\t', lineterminator='\n')
    out.writeheader()

    tx_list = []
    #tx_list = 'NM_178040.2 NM_015512.4'.split()
    tx_list = sys.argv[1:]
    txs = ",".join(["'{ac}'".format(ac=ac) for ac in tx_list]) if tx_list else ""
    query = [
        "SELECT * FROM tx_exon_aln_v D",
        "JOIN reece.ej_gene_transcript_v GL on D.tx_ac=GL.tx_ac",
        "WHERE alt_ac~'^NC_0000' and alt_aln_method='splign' and cigar~'[DIX]' AND D.tx_ac in ({txs})".format(txs=txs),
        "ORDER BY D.tx_ac,D.ord"
        ]
    cur = hdp._execute(" ".join(query))
    for row in cur:
        try:
            for hgvs_g in generate_variants(row):
                var_g = hp.parse_hgvs_variant(hgvs_g)

                var_c = evm.g_to_c(var_g, row['tx_ac'])
                e = var_c.posedit.edit
                e.ref, e.alt = e.alt, e.ref  # swap sense of change

                var_g5 = hn5.normalize(var_g)  # as VCF would do
                var_c3 = hn3.normalize(var_c)  # as HGVS demands

                out.writerow({
                    'hgvs_g5': str(var_g5),
                    'hgvs_c3': str(var_c3),
                    'tx_ac': row['tx_ac'],
                    'strand': row['alt_strand'],
                    'exon': row['ord']+1,
                    'cigar': row['cigar'],
                    })

                if with_context:
                    c = huc.variant_context_w_alignment(evm, var_g5, tx_ac=var_c.ac)
                    c = re.sub('^','## ',c,flags=re.M) + "\n"
                    sys.stdout.write(c)
        except Exception as e:
            logger.warn("# {row[tx_ac]}, exon {row[ord]}: {e}".format(
                row=row, e=traceback.format_exception_only(type(e),e)[0]))
