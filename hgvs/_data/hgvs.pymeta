# HGVS Grammar
# 2013-09-16 10:25 Reece Hart <reecehart@gmail.com>

# This file describes an OMeta grammar for a subset of the HGVS variant
# specification.  The subset is limited to is limited to those rules
# that define sequence variants precisely.  It does not current cover
# rules for translocations or conversions.
 
# * HGVS Sequence Variants -- fully-specified variants 
# The basic structure of a HGVS sequence variant is:
#    <ac>:<type>.<posedit>
# where <ac> is a sequence accession, <type> determines the sequence type
# and coordinate system ([cgmnpr]), and <posedit> is a string/list/object of
# positions and edit operations.
# 
# For example, consider the variant NM_01234.5:c.[12A>C;34-56_78+90G>T]:
# 
#     NM_01234.5 : c . [ 12 A>C ; 34 -56 _ 78 +90 del ]
#     -----------------------------------------------    hgvs_variant
#                  -     ----------------------------    type, posedits
#                        ------   -------------------    posedits = two posedit instances
#                        -- ---   --------------- ---    2 x posedit = interval,edit
#                        -- - -   ------   ------ ---    int = <start,end>; edit = <ref,alt>
#                        --       -- ---   -- ---        pos = <base,offset,datum>
#
#     In this diagram, contiguous dashes indicate both a node in the grammar
#     and a python class instance. Subsequent lines of the diagram indicate
#     object instance nesting.

# * HGVS Edit -- variants with reference to a sequence
#                  c . [ 12 A>C ; 34 -56 _ 78 +90 del ]
#                  ------------------------------------  edit
#
 
# * HGVS Location -- sequence intervals
# This grammar also supports "HGVS-lite" notations for position used at
# Invitae, like 'NM_01234.5:c.56'.  The hgvs_lite rule consists of a ref
# sequence, type, and position, and is parsed into corresponding objects.
#      NM_01234.5 : c . 34 -56 _ 78 +90
#      --------------------------------  hgvs_position
#      ----------   -   ---------------  ac, type, position

# * References:
# 1. http://www.hgvs.org/mutnomen/
# 2. Describing structural changes by extending HGVS sequence variation nomenclature.
#    http://www.ncbi.nlm.nih.gov/pubmed/21309030
# 3. A formalized description of the standard human variant nomenclature...
#    http://www.ncbi.nlm.nih.gov/pubmed/21992071
#

## MISSING FEATURES
# * LATER: posedits structure for chimeric, mosaic, compound variants, multiallelic variants
# * LATER: gene name
# * WONTFIX: translocations: intentionally omitted
# * WONTFIX: conversions: intentionally omitted
# * WONTFIX: insertions not specified by a sequence (e.g., ins22 isn't specific)


############################################################################
## HGVS Sequence Variant

hgvs_variant = g_variant | m_variant | c_variant | n_variant  | r_variant | p_variant

g_variant   = gm_variant
m_variant   = gm_variant
gm_variant = accn:ac ':' gm_type:type '.' gm_posedit:posedit -> hgvs.variant.SequenceVariant(ac,type,posedit)

c_variant   = cn_variant
n_variant   = cn_variant
cn_variant = accn:ac ':' cn_type:type '.' cn_posedit:posedit -> hgvs.variant.SequenceVariant(ac,type,posedit)

r_variant   = accn:ac ':'      'r':type '.'   r_posedit:posedit -> hgvs.variant.SequenceVariant(ac,type,posedit)

p_variant   = accn:ac ':'      'p':type '.'   p_posedit:posedit -> hgvs.variant.SequenceVariant(ac,type,posedit)


# any_variant is intended for lax parsing around ':' and '.' components
# Disabling in response to issue #167. The SequenceVariant object returned below is significantly
# unlike those returned by parsing proper HGVS variants that it is confusing.
# any_variant = accn:ac ':' letter:type '.' <anything+>:posedit -> hgvs.variant.SequenceVariant(ac,type,posedit)


############################################################################
## HGVS Edit (without accession); e.g., c.76+3A>T

g_edit   = gm_edit
m_edit   = gm_edit
gm_edit = gm_type:type '.' gm_posedit:posedit -> hgvs.variant.SequenceVariant(None,type,posedit)

n_edit   = cn_edit
c_edit   = cn_edit
cn_edit = cn_type:type '.' cn_posedit:posedit -> hgvs.variant.SequenceVariant(None,type,posedit)

p_edit   = 'p':type '.'   p_posedit:posedit -> hgvs.variant.SequenceVariant(None,type,posedit)

r_edit   = 'r':type '.'   r_posedit:posedit -> hgvs.variant.SequenceVariant(None,type,posedit)



############################################################################
## HGVS Position -- e.g., NM_01234.5:c.22+6 (without an edit)

hgvs_position     = gm_hgvs_position | cn_hgvs_position | r_hgvs_position | p_hgvs_position

g_hgvs_position   = gm_hgvs_position
m_hgvs_position   = gm_hgvs_position
gm_hgvs_position = accn:ac ':' gm_type:type '.' gm_interval:pos -> hgvs.hgvsposition.HGVSPosition(ac, type, pos)

c_hgvs_position   = cn_hgvs_position
n_hgvs_position   = cn_hgvs_position
cn_hgvs_position = accn:ac ':' cn_type:type '.' cn_interval:pos -> hgvs.hgvsposition.HGVSPosition(ac, type, pos)

p_hgvs_position   = accn:ac ':' 'p':type      '.'   p_interval:pos -> hgvs.hgvsposition.HGVSPosition(ac, type, pos)

r_hgvs_position   = accn:ac ':' 'r':type      '.'   r_interval:pos -> hgvs.hgvsposition.HGVSPosition(ac, type, pos)


############################################################################
## PosEdits -- position + edit objects

# any_posedit = g_posedit | m_posedit | n_posedit | c_posedit | r_posedit | p_posedit 

g_posedit   = gm_posedit
m_posedit   = gm_posedit
gm_posedit = gm_interval:pos dna_edit:edit -> hgvs.posedit.PosEdit(pos=pos,edit=edit)

n_posedit   = cn_posedit
c_posedit   = cn_posedit
cn_posedit  = cn_interval:pos dna_edit:edit -> hgvs.posedit.PosEdit(pos=pos,edit=edit)

r_posedit   = (r_interval:pos rna_edit:edit -> hgvs.posedit.PosEdit(pos=pos,edit=edit))
   | ('(' r_interval:pos rna_edit:edit ')' -> hgvs.posedit.PosEdit(pos=pos,edit=edit, uncertain=True))

p_posedit   = (p_interval:pos pro_edit:edit -> hgvs.posedit.PosEdit(pos=pos,edit=edit))
   | ('(' p_interval:pos pro_edit:edit ')' -> hgvs.posedit.PosEdit(pos=pos,edit=edit, uncertain=True))
   | p_posedit_special
p_posedit_special = 
      '=':x -> hgvs.posedit.PosEdit(pos=None,edit=x,uncertain=False)
	| '(' '=':x ')' -> hgvs.posedit.PosEdit(pos=None,edit=x,uncertain=True)
	| '0':x '?' -> hgvs.posedit.PosEdit(pos=None,edit=x,uncertain=True)
	| '0':x -> hgvs.posedit.PosEdit(pos=None,edit=x,uncertain=False)
	| '?':x -> hgvs.posedit.PosEdit(pos=None,edit='',uncertain=True)


############################################################################
## Edits -- sequence-specific operations at a position
## subst, delins, del, and ins are represented using two classes, NARefAlt
## and AARefAlt.  See edit.py for the meaning of the ref and alt instance
## variables.
## "_mu" = "maybe uncertain"

dna_edit_mu = dna_edit | '(' dna_edit:edit ')' -> edit._set_uncertain()
dna_edit   = dna_dupN | dna_subst | dna_delins | dna_ins | dna_del | dna_dup | dna_inv | dna_con | dna_copy
dna_subst  = dna:ref '>' dna:alt      -> hgvs.edit.NARefAlt(ref=ref,alt=alt)
dna_delins = 'del' (<num>|<dna*>):ref 'ins' <dna+>:alt  -> hgvs.edit.NARefAlt(ref=ref,alt=alt)
dna_del    = 'del' (<num>|<dna*>):ref -> hgvs.edit.NARefAlt(ref=ref,alt=None)
dna_ins    = 'ins' <dna+>:alt         -> hgvs.edit.NARefAlt(ref=None,alt=alt)
dna_dup    = 'dup' <dna*>:ref         -> hgvs.edit.Dup(ref=ref)
dna_inv    = 'inv'                    -> hgvs.edit.Inv()
dna_con    = 'con' hgvs_position:pos  -> hgvs.edit.Conv(from_ac=pos.ac, from_type=pos.type, from_pos=pos.pos)
# internal
dna_copy = 'copy' num:n -> hgvs.edit.NACopy(copy=n)
dna_dupN = 'dup' num:n -> hgvs.edit.NADupN(n=n)

## TODO: Repeat
# Hey, self- I caught you! Stick to one feature add at a time!
# dna_rpt    = '[' num:count ']' -> Repeat(ref=None, min=count, max=count)
# 		     | <dna+>:ref '(' num:min '_' num:max ')' -> Repeat(ref=ref, min=min, max=max)

rna_edit_mu = rna_edit | '(' rna_edit:edit ')' -> edit._set_uncertain()
rna_edit   = rna_subst | rna_delins | rna_ins | rna_del | rna_dup | rna_inv | rna_con
rna_subst  = rna:ref '>' rna:alt             -> hgvs.edit.NARefAlt(ref=ref,alt=alt)
rna_delins = 'del' (<num>|<rna*>):ref 'ins' <rna+>:alt  -> hgvs.edit.NARefAlt(ref=ref,alt=alt)
rna_del    = 'del' (<num>|<rna*>):ref        -> hgvs.edit.NARefAlt(ref=ref,alt=None)
rna_ins    = 'ins' <rna+>:alt                -> hgvs.edit.NARefAlt(ref=None,alt=alt)
rna_dup    = 'dup' <rna*>:ref                -> hgvs.edit.Dup(ref=ref)
rna_inv    = 'inv'                           -> hgvs.edit.Inv()
rna_con    = 'con' hgvs_position:pos         -> hgvs.edit.Conv(from_ac=pos.ac, from_type=pos.type, from_pos=pos.pos)

pro_edit_mu = pro_edit | '(' pro_edit:edit ')' -> edit._set_uncertain()
pro_edit   = pro_fs | pro_ext | pro_subst | pro_delins | pro_ins | pro_del | pro_dup
pro_subst  = (aat13|'?'):alt                 -> hgvs.edit.AASub(ref='',alt=bioutils.sequences.aa_to_aa1(alt))
pro_delins = 'delins' aat13_seq:alt          -> hgvs.edit.AARefAlt(ref='',alt=bioutils.sequences.aa_to_aa1(alt))
pro_del    = 'del'                           -> hgvs.edit.AARefAlt(ref='',alt=None)
pro_ins    = 'ins' aat13_seq:alt             -> hgvs.edit.AARefAlt(ref=None,alt=bioutils.sequences.aa_to_aa1(alt))
pro_dup    = 'dup'                           -> hgvs.edit.Dup(ref='')
pro_fs     = (aat13 | (-> '')):alt fs:length -> hgvs.edit.AAFs(ref='',alt=bioutils.sequences.aa_to_aa1(alt),length=length)
pro_ext    = aat13?:alt ext:(aaterm, length) -> hgvs.edit.AAExt(ref='',alt=bioutils.sequences.aa_to_aa1(alt),aaterm=bioutils.sequences.aa_to_aa1(aaterm), length=length)


############################################################################
## Locations
# Much of the complexity below is to handle the combinations of various
# location syntax and uncertainty


# potentially indefinite/uncertain intervals
g_interval = gm_interval
m_interval = gm_interval
gm_interval = def_gm_interval | '(' def_gm_interval:iv ')' -> iv._set_uncertain()

c_interval = cn_interval
n_interval = cn_interval
cn_interval = def_c_interval | '(' def_c_interval:iv ')' -> iv._set_uncertain()

r_interval = def_r_interval | '(' def_r_interval:iv ')' -> iv._set_uncertain()

p_interval = def_p_interval | '(' def_p_interval:iv ')' -> iv._set_uncertain()


# definite intervals
def_g_interval = def_gm_interval
def_m_interval = def_gm_interval
def_gm_interval = ( gm_pos:start '_' gm_pos:end -> hgvs.location.Interval(start,end)) | (gm_pos:start -> hgvs.location.Interval(start,start))

def_c_interval = def_cn_interval
def_n_interval = def_cn_interval
def_cn_interval = (c_pos:start '_' c_pos:end -> hgvs.location.Interval(start,end)) | (c_pos:start -> hgvs.location.Interval(start,start))

def_r_interval = (r_pos:start '_' r_pos:end -> hgvs.location.Interval(start,end)) | (r_pos:start -> hgvs.location.Interval(start,start))

def_p_interval = (p_pos:start '_' p_pos:end -> hgvs.location.Interval(start,end)) | (p_pos:start -> hgvs.location.Interval(start,start))


# potentially indefinite/uncertain positions
g_pos = gm_pos
m_pos = gm_pos
gm_pos = def_gm_pos #| '(' def_gm_pos:pos ')' -> pos._set_uncertain()

#individual coords may not be uncertain (see interval, which may be)
r_pos = def_r_pos #| '(' def_r_pos:pos ')' -> pos._set_uncertain()
c_pos = def_c_pos #| '(' def_c_pos:pos ')' -> pos._set_uncertain()
n_pos = def_n_pos #| '(' def_n_pos:pos ')' -> pos._set_uncertain()
p_pos = def_p_pos #| '(' def_p_pos:pos ')' -> pos._set_uncertain()

# definite positions
def_g_pos = def_gm_pos
def_m_pos = def_gm_pos
def_gm_pos = (num|'?'->None):pos -> hgvs.location.SimplePosition(pos)

def_c_pos = def_cn_pos
def_n_pos = def_cn_pos
def_cn_pos = base:b offset:o -> hgvs.location.BaseOffsetPosition(b,o,datum=hgvs.location.CDS_START)
       | '*' num:b offset:o -> hgvs.location.BaseOffsetPosition(b,o,datum=hgvs.location.CDS_END)

def_r_pos = base:b offset:o -> hgvs.location.BaseOffsetPosition(b,o,datum=hgvs.location.SEQ_START)

def_p_pos = (term13|aa13):aa num:pos -> hgvs.location.AAPosition(pos,bioutils.sequences.aa_to_aa1(aa))


############################################################################
## Basic types
# Amino acids may be referred to with 1 or 3 letters.  In the following
# rules, '1' = 1-letter AA, '3' = 3-letter, '13' = 1 or 3, and 't' =
# includes terminator codon.  '_seq' refers to a sequence of any of these.

gm_type = :x ?(x in 'gm') -> x
cn_type = :x ?(x in 'cn') -> x


# AA fs/ext
fs = 'fs' (aa13_fs | -> None):n -> n
ext = 'ext' (aa13_ext | -> (None, None)):(aat, n) -> (aat, n)
aa13_fs = term13 fsext_offset:n -> n
aa13_ext = term13:aat fsext_offset:n -> (aat, n)
         | (aa13 | (-> None)):aat nnum:n -> (aat, n)
fsext_offset = num|'?'| (-> None)

# sequences of NA/AA
dna_seq = <dna+>
rna_seq = <rna+>
aat13_seq = <aat3_seq> | <aat1_seq>
aat1_seq = <term1> | <aa1+ term1?>
aat3_seq = <term3> | <aa3+ term3?>
aa13_seq = <aa3_seq> | <aa1_seq>
aa1_seq = <aa1+>
aa3_seq = <aa3+>

# A single 1-or-3 letter amino acid
dna4 = :x ?(x in 'ACGTacgt') -> x
rna4 = :x ?(x in 'ACGUacgu') -> x
dna5 = :x ?(x in 'ACGTacgtNn') -> x
rna5 = :x ?(x in 'ACGUacguNn') -> x
dna_iupac = :x ?(x in 'ACGTRYMKWSBDHVNacgtrymkwsbdhvn') -> x
rna_iupac = :x ?(x in 'ACGURYMKWSBDHVNacgurymkwsbdhvn') -> x
na_iupac = :x ?(x in 'ACGTURYMKWSBDHVNacgturymkwsbdhvn') -> x
dna = dna_iupac
rna = rna_iupac
aat13 = aat3 | aat1
aat3 = term3 | aa3
aat1 = term1 | aa1
aa13 = aa3 | aa1
aa1 = :x ?(x in 'ACDEFGHIKLMNPQRSTVWYBZXU') -> x
aa3 = 'Ala'|'Cys'|'Asp'|'Glu'|'Phe'|'Gly'|'His'|'Ile'|'Lys'|'Leu'|'Met'|'Asn'|'Pro'|'Gln'|'Arg'|'Ser'|'Thr'|'Val'|'Trp'|'Tyr' | 'Asx' | 'Glx' | 'Xaa' | 'Sec'
term13 = term3 | term1
term1 = :x ?(x in 'X*') -> x
term3 = 'Ter'

# position primitives
# N.B. ? is not supported in mapping
base = snum | ('?' -> None)
offset = snum | ('?' -> None) | (-> 0)
nnum = <'-' num>:x -> int(x)
snum = <pm? num>:x -> int(x)
num = <digit+>:x -> int(x)
pm = :x ?(x in '-+') -> x

# Accessions, possibly versioned. Should accept, e.g., NM_01234.5, LRG_01234_1p1
accn = <letter letterOrDigit+ ('_' letterOrDigit+)? ('.' digit+)?>

Not_Yet_Implemented = 'NOT YET IMPLEMENTED'